# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: pya2ldb

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    continue-on-error: true
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest] # , ubuntu-latest, macos-13, macos-14
        # cibw_archs: ["x86_64", ""]
        #include:
        #  - os: ubuntu-latest
        #    cibw_archs: "aarch64"
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU (for ARM builds)
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm,arm64
      - name: Build wheel
        uses: pypa/cibuildwheel@v2.20
        env:
          CIBW_ARCHS_LINUX: x86_64 aarch64 armv7l
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          CIBW_MANYLINUX_ARMV7L_IMAGE: manylinux2014
      - uses: actions/upload-artifact@v4
        with:
          # path: ./dist/*.whl
          # include-hidden-files: true
          # retention-days: 1
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: |
          pip install -U build
          python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz
          include-hidden-files: true
          retention-days: 1

  upload_pypi:
    needs: [build_wheels, build_sdist] # , build_sdist
    runs-on: ubuntu-latest
    #    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4.1.7
        with:
          # name: artifact
          path: dist
          merge-multiple: true
          # pattern: dist/*

      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}

[tool.poetry]
name = "pya2ldb"
version = "0.12.93"
description = "A2L for Python"
authors = ["Christoph Schueler <cpu12.gems@googlemail.com>"]
license = "GPLv2"
readme = "README.md"
homepage = "https://github.com/christoph2/pyA2L"
classifiers=[
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: 3.13",
]
build = "build_ext.py"
include = [
    { path = "pya2l/*.so", format = "wheel" },
    { path = "pya2l/*.pyd", format = "wheel" },
	{ path = "pya2l/cgen/templates/*.tmpl", format = "wheel" },
]
packages = [
    { include = "pya2l" }
]


[tool.poetry.dependencies]
python = "^3.9"
antlr4-python3-runtime = "4.13.1"
chardet = "^5.2.0"
Mako = "^1.3.5"
SQLAlchemy = "^2.0.30"
numpy = "^1.26.4"
scipy = "^1.13.1"
rich = "^13.7.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pre-commit = "^3.7.1"
bandit = "^1.7.8"
ruff = "^0.4.8"
isort = "^5.13.2"
flake8 = "^7.0.0"
black = "^24.4.2"
flake8-bugbear = "^24.4.26"
pre-commit-hooks = "^4.6.0"

pyupgrade = "^3.16.0"
[build-system]
requires = ["poetry-core>=1.6.0", "setuptools>=68.0.0" , "pybind11>=2.11.1", "wheel", "ninja", "cmake>=3.12"]
build-backend = "poetry.core.masonry.api"


[project.scripts]
a2ldb-imex = "pya2l.scripts.a2ldb_imex:main"

[tool.pytest]
addopts = "--verbose --tb=short --junitxml=result.xml -o junit_family=xunit2"
testpaths = "pya2l/tests"

[tool.flake8]
ignore = ["D203", "E203", "E266", "E501", "W503", "F403", "F401", "BLK100"]
exclude = '''
/(
    \.git
    | __pycache__
    | \.mypy_cache
    | \.tox
    | \.venv
    | \.eggs
    | _build
    | build
    | __pypackages__
    | docs
    | dist
    | experimental
    | pya2l/a2lLexer.py
    | pya2l/amlLexer.py
    | pya2l/amlParser.py
    | pya2l/a2llg.py
    | pya2l/a2lParser.py
)/
'''
max-complexity = 10
count = true
statistics = true
show-source = true
max-line-length = 132
select = ["B","C","E","F","W","T4","B9"]

[tool.black]
line-length=132
include = '\.pyi?$'
exclude = '''
/(
    \.git
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | __pypackages__
    | build
    | docs
    | experimental
    | __pycache__
    | pya2l/a2lLexer.py
    | pya2l/amlLexer.py
    | pya2l/amlParser.py
    | pya2l/a2llg.py
    | pya2l/a2lParser.py
    | dist
)/
'''

[tool.isort]
profile = "black"
force_single_line = false
lines_after_imports = 2

[tool.mypy]
strict = false
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true

[tool.ruff]
target-version = "py312"

[tool.ruff.lint]
extend-select = [
  "B",    # flake8-bugbear
  "I",    # isort
  "PGH",  # pygrep-hooks
  "RUF",  # Ruff-specific
  "UP",   # pyupgrade
]
ignore = ["I001"]
unfixable = ["B"]

[tool.bandit]
exclude_dirs = [".venv", "tests"]
skips = ["B307", "B404", "B605", "B607", "B603"]

[tool.cibuildwheel.linux]
environment = { CLASSPATH="$PWD/antlr-4.11.1-complete.jar" }

[tool.cibuildwheel.macos]
environment = { CLASSPATH="$PWD/antlr-4.11.1-complete.jar" }

[tool.cibuildwheel.windows]
environment = { CLASSPATH="%PWD%/antlr-4.11.1-complete.jar" }

[tool.cibuildwheel]
build-verbosity = 3
build = "cp3{8,9,10,11,12,13}-*"
#test-command = "pytest -svv"
#build-frontend = "build"
#build-frontend = "pip"
before-build = [
    "python install_antlr.py"
]
